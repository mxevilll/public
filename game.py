import nest_asyncio
nest_asyncio.apply()

import asyncio
import os
import mysql.connector
from mysql.connector import Error
from datetime import datetime
from telegram import (
    Update, ReplyKeyboardMarkup, ReplyKeyboardRemove,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler,
    MessageHandler, ContextTypes, filters, CallbackQueryHandler
)

BOT_TOKEN = ""
DB_CONFIG = {
    "host": "localhost",
    "user": "ten",
    "password": "",
    "database": "ten",
    "charset": "utf8mb4",
    "collation": "utf8mb4_unicode_ci"
}

PHOTO_DIR = "photos"
os.makedirs(PHOTO_DIR, exist_ok=True)

def get_db_connection():
    return mysql.connector.connect(**DB_CONFIG)


def execute_query(query, params=()):
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    result = None
    try:
        cursor.execute(query, params)
        if query.strip().upper().startswith("SELECT"):
            result = cursor.fetchall()
        else:
            conn.commit()
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    finally:
        cursor.close()
        conn.close()
    return result

QUESTIONS = [
    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
    ("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª (–ú/–ñ):",
     [["–ú"], ["–ñ"]]),
    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:",
    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:",

    ("–û—Ç–≤–µ—Ç—å –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∂–¥–∏ —Å–≤–æ—é –ª—é–±–æ–≤—å. ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è\n\n–í–æ–ø—Ä–æ—Å 1. \n–ö—Ç–æ –¥–æ–ª–∂–µ–Ω –ø–ª–∞—Ç–∏—Ç—å –Ω–∞ –ø–µ—Ä–≤–æ–º —Å–≤–∏–¥–∞–Ω–∏–∏?",
     [["–ú—É–∂—á–∏–Ω–∞"], ["–ñ–µ–Ω—â–∏–Ω–∞"], ["–ö–∞–∂–¥—ã–π –∑–∞ —Å–µ–±—è"], ["–¢–æ—Ç, –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª"]]),

    ("–í–æ–ø—Ä–æ—Å 2. \n–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –±—Ä–∞—á–Ω–æ–º—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É?",
     [["–†–∞–∑—É–º–Ω–∞—è –ø—Ä–µ–¥–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å"], ["–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–¥–æ–≤–µ—Ä–∏–µ"]]),

    ("–í–æ–ø—Ä–æ—Å 3. \n–°–æ–±–∞–∫–∞ –∏–ª–∏ –∫–æ—à–∫–∞?",
     [["–°–æ–±–∞–∫–∞"], ["–ö–æ—à–∫–∞"]]),

    ("–í–æ–ø—Ä–æ—Å 4. \n–õ—ã–∂–∏ –∏–ª–∏ —Å–Ω–æ—É–±–æ—Ä–¥?",
     [["–õ—ã–∂–∏"], ["–°–Ω–æ—É–±–æ—Ä–¥"]]),

    ("–í–æ–ø—Ä–æ—Å 5. \n–õ—é–±–æ–≤—å –¥–ª—è –≤–∞—Å ‚Äî —ç—Ç–æ‚Ä¶",
     [["–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —É–≤–∞–∂–µ–Ω–∏–µ"], ["–°—Ç—Ä–∞—Å—Ç—å –∏ —ç–º–æ—Ü–∏–∏"]]),

    ("–í–æ–ø—Ä–æ—Å 6. \n–ö–∞–∫ –≤—ã —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã?",
     [["–î–µ—Ç–∏, –ø–∞—Ä—Ç–Ω–µ—Ä, —è, —Ä–æ–¥–∏—Ç–µ–ª–∏"],
      ["–ü–∞—Ä—Ç–Ω–µ—Ä, –¥–µ—Ç–∏, —è, —Ä–æ–¥–∏—Ç–µ–ª–∏"],
      ["–Ø, –ø–∞—Ä—Ç–Ω–µ—Ä, –¥–µ—Ç–∏, —Ä–æ–¥–∏—Ç–µ–ª–∏"],
      ["–†–æ–¥–∏—Ç–µ–ª–∏, –¥–µ—Ç–∏, –ø–∞—Ä—Ç–Ω–µ—Ä, —è"]]),

    ("–í–æ–ø—Ä–æ—Å 7. \n–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ —Ä–∞–∑–¥–µ–ª—å–Ω–æ–º—É –±—é–¥–∂–µ—Ç—É –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö?",
     [["–°–æ—Ö—Ä–∞–Ω—è—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å"], ["–õ—É—á—à–µ –æ–±—â–∏–π –±—é–¥–∂–µ—Ç"]]),

    ("–í–æ–ø—Ä–æ—Å 8. \n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–ø—É—Å–∫ –≤–∞—à–µ–π –º–µ—á—Ç—ã:",
     [["–ì–æ—Ä—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö"], ["–ú–æ—Ä–µ –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ"]]),

    ("–í–æ–ø—Ä–æ—Å 9. \n–í–∞–∂–Ω–µ–µ –≤ –ø–∞—Ä—Ç–Ω–µ—Ä–µ:",
     [["–£–º–µ–Ω–∏–µ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å"], ["–£–º–µ–Ω–∏–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –∏ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"]]),

    ("–í–æ–ø—Ä–æ—Å 10. \n–ö—Ç–æ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–≤—ã–º –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è?",
     [["–ú—É–∂—á–∏–Ω–∞"], ["–ñ–µ–Ω—â–∏–Ω–∞"]]),


    "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∫–µ—Ç—ã üì∏"
]

COLUMN_NAMES = [
    "gender",  # question_index=1
    "age",     # question_index=2
    "city",    # question_index=3
    "q1",      # question_index=4
    "q2",      # question_index=5
    "q3",      # question_index=6
    "q4",      # question_index=7
    "q5",      # question_index=8
    "q6",      # question_index=9
    "q7",      # question_index=10
    "q8",      # question_index=11
    "q9",      # question_index=12
    "q10"      # question_index=13
]


def initialize_db():
    execute_query('''
        CREATE TABLE IF NOT EXISTS users (
            id INT AUTO_INCREMENT PRIMARY KEY,
            telegram_id BIGINT UNIQUE,
            username VARCHAR(255),
            name VARCHAR(255),
            gender VARCHAR(10),
            age INT,
            city VARCHAR(255),
            q1 VARCHAR(255),
            q2 VARCHAR(255),
            q3 VARCHAR(255),
            q4 VARCHAR(255),
            q5 VARCHAR(255),
            q6 VARCHAR(255),
            q7 VARCHAR(255),
            q8 VARCHAR(255),
            q9 VARCHAR(255),
            q10 VARCHAR(255),
            photo_url VARCHAR(255)
        ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    ''')

    execute_query('''
        CREATE TABLE IF NOT EXISTS likes (
            id INT AUTO_INCREMENT PRIMARY KEY,
            user_id BIGINT,
            liked_user_id BIGINT,
            created_at DATETIME
        ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    ''')

def get_user_data(user_id: int):
    """ –î–æ—Å—Ç–∞—ë–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–ª, –≥–æ—Ä–æ–¥, —Ñ–æ—Ç–æ –∏ —Ç.–¥.). """
    rows = execute_query(
        "SELECT * FROM users WHERE telegram_id=%s LIMIT 1",
        (user_id,)
    )
    return rows[0] if rows else None

def get_opposite_gender(gender: str) -> str:
    """ –ú->–ñ, –ñ->–ú, –∏–Ω–∞—á–µ "" """
    if not gender:
        return ""
    g = gender.upper()
    if g == "–ú":
        return "–ñ"
    elif g == "–ñ":
        return "–ú"
    return ""

def get_candidates(user_id: int):
    """
    –ò—â–µ–º —Ç–µ—Ö, –∫—Ç–æ:
      - –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π –ø–æ–ª
      - –ò–º–µ–µ—Ç —Ñ–æ—Ç–æ
      - –ù–µ user_id
      - –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –≥–æ—Ä–æ–¥ —Ç–æ—Ç –∂–µ (city_match=1)
    """
    user_row = get_user_data(user_id)
    if not user_row:
        return []
    opposite = get_opposite_gender(user_row["gender"])
    city = user_row["city"] or ""

    query = """
    SELECT *,
           CASE WHEN city = %s THEN 1 ELSE 0 END AS city_match
    FROM users
    WHERE telegram_id <> %s
      AND gender = %s
      AND photo_url IS NOT NULL
    ORDER BY city_match DESC
    """
    rows = execute_query(query, (city, user_id, opposite))
    return rows or []

async def show_next_candidate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
    user_id = update.effective_user.id
    user_data = context.user_data
    

    candidates = get_candidates(user_id)
    
    if not candidates:
        await update.effective_message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –∞–Ω–∫–µ—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞.")
        return


    viewed_ids = user_data.get("viewed_ids", set())
    

    candidate = None
    for cand in candidates:
        if cand['telegram_id'] not in viewed_ids:
            candidate = cand
            break
    
    if not candidate:

        user_data["viewed_ids"] = set()
        await show_next_candidate(update, context)
        return


    viewed_ids.add(candidate['telegram_id'])
    user_data["viewed_ids"] = viewed_ids
    

    name = candidate["name"] or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    city = candidate["city"] or "–ù–µ —É–∫–∞–∑–∞–Ω"
    photo = candidate["photo_url"]
    
    keyboard = [
        [
            InlineKeyboardButton("‚ù§Ô∏è –ù—Ä–∞–≤–∏—Ç—Å—è", callback_data="like"),
            InlineKeyboardButton("–î–∞–ª—å—à–µ", callback_data="skip")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        if photo and os.path.exists(photo):
            with open(photo, "rb") as f:
                await update.effective_message.reply_photo(
                    photo=f,
                    caption=f"–ê–Ω–∫–µ—Ç–∞: {name}, {city}",
                    reply_markup=reply_markup
                )
        else:
            await update.effective_message.reply_text(
                f"–ê–Ω–∫–µ—Ç–∞: {name}, {city}\n(–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)",
                reply_markup=reply_markup
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {e}")

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ /start """
    context.user_data.clear()
    await update.message.reply_text(
        "–î–µ—Å—è—Ç–æ—á–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è! üéâ\n"
        "–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ. ‚úÖ\n\n"
        f"{QUESTIONS[0]}"
    )
    context.user_data["question_index"] = 0

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–∏–º—è, –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, –≥–æ—Ä–æ–¥ + 10 –≤–æ–ø—Ä–æ—Å–æ–≤). """
    if "question_index" not in context.user_data:
        await update.message.reply_text("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /start.")
        return

    question_index = context.user_data["question_index"]
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    if not username:
        await update.message.reply_text("‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
        context.user_data["question_index"] = 0  # –°–±—Ä–æ—Å –∞–Ω–∫–µ—Ç—ã
        return
    text = update.message.text.strip()


    if context.user_data.get("waiting_for_photo"):
        await update.message.reply_text("–°–µ–π—á–∞—Å –Ω—É–∂–Ω–æ —Ñ–æ—Ç–æ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç!")
        return

    if question_index == 0:

        execute_query(
            """
            INSERT INTO users (telegram_id, username, name)
            VALUES (%s, %s, %s)
            ON DUPLICATE KEY UPDATE
                name=VALUES(name),
                username=VALUES(username)
            """,
            (user_id, username, text)
        )
    else:

        if 1 <= question_index <= 13:
            col = COLUMN_NAMES[question_index - 1]
            execute_query(
                f"UPDATE users SET {col}=%s WHERE telegram_id=%s",
                (text, user_id)
            )

    question_index += 1
    context.user_data["question_index"] = question_index

    if question_index < len(QUESTIONS) - 1:
        nxt = QUESTIONS[question_index]
        if isinstance(nxt, tuple):
            q_text, options = nxt
            kb = ReplyKeyboardMarkup(options, one_time_keyboard=True, resize_keyboard=True)
            await update.message.reply_text(q_text, reply_markup=kb)
        else:
            await update.message.reply_text(nxt, reply_markup=ReplyKeyboardRemove())
    elif question_index == len(QUESTIONS) - 1:

        await update.message.reply_text(QUESTIONS[-1], reply_markup=ReplyKeyboardRemove())
        context.user_data["waiting_for_photo"] = True
    else:
        await update.message.reply_text("–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —É–∂–µ –∑–∞–¥–∞–Ω—ã. –ñ–¥—É —Ñ–æ—Ç–æ!")

async def handle_photo_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤. """
    if not context.user_data.get("waiting_for_photo"):
        await update.message.reply_text("–°–µ–π—á–∞—Å —Ñ–æ—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ. –í–≤–µ–¥–∏—Ç–µ /start.")
        return

    user_id = update.message.from_user.id
    photo = update.message.photo[-1]
    file = await context.bot.get_file(photo.file_id)
    path = os.path.join(PHOTO_DIR, f"{user_id}.jpg")
    await file.download_to_drive(custom_path=path)

    execute_query(
        "UPDATE users SET photo_url=%s WHERE telegram_id=%s",
        (path, user_id)
    )
    context.user_data["waiting_for_photo"] = False
    await update.message.reply_text("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ.")

    context.user_data["viewed_ids"] = set()
    await show_next_candidate(update, context)

    if not cands:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await show_next_candidate(update, context)

async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞/–ø—Ä–æ–ø—É—Å–∫–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–ø–∏—Å–∫–∞"""
    query = update.callback_query
    data = query.data
    user_id = query.from_user.id

    await query.answer()
    await query.edit_message_reply_markup(reply_markup=None)

    if data == "like":

        viewed_ids = context.user_data.get("viewed_ids", set())
        if not viewed_ids:
            return
        

        candidate_id = list(viewed_ids)[-1]

        execute_query(
            "INSERT INTO likes (user_id, liked_user_id, created_at) VALUES (%s, %s, %s)",
            (user_id, candidate_id, datetime.now())
        )
        await query.message.reply_text("–í—ã –Ω–∞–∂–∞–ª–∏ ¬´–ù—Ä–∞–≤–∏—Ç—Å—è¬ª! (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ)")


        row = execute_query(
            "SELECT id FROM likes WHERE user_id=%s AND liked_user_id=%s LIMIT 1",
            (candidate_id, user_id)
        )
        if row:
            await notify_mutual_like(user_id, candidate_id, context)


    await show_next_candidate(update, context)

async def notify_mutual_like(userA_id: int, userB_id: int, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ–æ–±—â–µ–Ω–∏–µ:
    "–í—ã –Ω—Ä–∞–≤–∏—Ç–µ—Å—å –¥—Ä—É–≥ –¥—Ä—É–≥—É..." + —Ñ–æ—Ç–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ + –∫–Ω–æ–ø–∫–∏ (–æ–±—â–µ–Ω–∏–µ / –î–∞–ª—å—à–µ).
    """
    userA = get_user_data(userA_id)
    userB = get_user_data(userB_id)
    if not userA or not userB:
        return

    nameA = userA["name"] or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    usernameA = userA["username"]
    photoA = userA["photo_url"]

    nameB = userB["name"] or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    usernameB = userB["username"]
    photoB = userB["photo_url"]


    def build_keyboard(partner_username):
        rows = []
        if partner_username:
            rows.append([InlineKeyboardButton("–ù–∞—á–∞—Ç—å –ª–∏—á–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ", url=f"https://t.me/{partner_username}")])
        rows.append([InlineKeyboardButton("–î–∞–ª—å—à–µ", callback_data="skip")])
        return InlineKeyboardMarkup(rows)

    textA = f"–í—ã –Ω—Ä–∞–≤–∏—Ç–µ—Å—å –¥—Ä—É–≥ –¥—Ä—É–≥—É ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è\n–ò–º—è: {nameB}"
    markupA = build_keyboard(usernameB)
    if photoB and os.path.exists(photoB):
        await context.bot.send_photo(
            chat_id=userA_id,
            photo=open(photoB, "rb"),
            caption=textA,
            reply_markup=markupA
        )
    else:
        await context.bot.send_message(
            chat_id=userA_id,
            text=f"{textA}\n(–§–æ—Ç–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)",
            reply_markup=markupA
        )


    textB = f"–í—ã –Ω—Ä–∞–≤–∏—Ç–µ—Å—å –¥—Ä—É–≥ –¥—Ä—É–≥—É ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è\n–ò–º—è: {nameA}"
    markupB = build_keyboard(usernameA)
    if photoA and os.path.exists(photoA):
        await context.bot.send_photo(
            chat_id=userB_id,
            photo=open(photoA, "rb"),
            caption=textB,
            reply_markup=markupB
        )
    else:
        await context.bot.send_message(
            chat_id=userB_id,
            text=f"{textB}\n(–§–æ—Ç–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)",
            reply_markup=markupB
        )

async def main():
    initialize_db()
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo_message))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    application.add_handler(CallbackQueryHandler(callback_query_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è...")
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
